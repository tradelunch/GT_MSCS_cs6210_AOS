Time-Sensitive Linux
--------------------
1) Distinguish with examples between the goals of throughput-oriented
   and latency-sensitive applications.

2) Distinguish between "timer latency", "preemption latency", and
   "scheduling latency".  How do these terms affect a latency-sensitive
   application?

3) Discuss the pros and cons of "periodic timers", "one shot timers", and
   "soft timers" from the point of view of latency-sensitive applications.

4) How does the "firm timer" combine the advantages of all three above
   timers?

5) Discuss the implementation issues for "Firm timer".

6) What are potential ways to reduce "preemption latency"?

7) Explain with an example how "proportion period" scheduler works.

8) Explain "priority inversion" with an example.

Virtual everything but time
---------------------------
1) Explain the problem being addressed by this paper.

2) What are the problems with network (feedback) based time synchronization?
   Under what conditions does it work well, and under what conditions it does
   not work well?

3) Differentiate between feedback-based and feed-forward based time
   synchronization.

Persistent Temporal Streams
---------------------------
1) What are "situation awareness" applications?  How do they differ from
   typical enterprise applications (such as DB transactional systems, online
   banking, stock trading, etc.)?

2) What are the pain points in building large-scale camera networks for
   situation awareness?

3) How does the PTS computational model (with PTS threads and channels) differ
   from a Unix distributed program written with sockets and processes?

4) What is the "heavy lifting" involved in implementing the get/put primitives
   of PTS?
